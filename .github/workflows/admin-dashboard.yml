name: Admin Dashboard CI/CD

on:
  push:
    branches: [master, develop]
    paths:
      - 'services/admin-dashboard/**'
      - 'shared/**'
      - '.github/workflows/admin-dashboard.yml'
  pull_request:
    branches: [master, develop]
    paths:
      - 'services/admin-dashboard/**'
      - 'shared/**'
      - '.github/workflows/admin-dashboard.yml'

env:
  SERVICE_NAME: admin-dashboard
  SERVICE_PATH: services/admin-dashboard
  DOCKER_REGISTRY: gcr.io
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ env.SERVICE_PATH }}/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test -- --coverage
      
      - name: Build
        run: npm run build
        env:
          VITE_API_BASE_URL: https://api.parkgolf.com
          VITE_NODE_ENV: production

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ env.SERVICE_PATH }}/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.PRODUCTION_API_URL }}
          VITE_NODE_ENV: production
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true
      
      - name: Configure Docker
        run: gcloud auth configure-docker
      
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            ${{ env.DOCKER_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest
      
      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

  deploy-to-cdn:
    name: Deploy to CDN
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ env.SERVICE_PATH }}/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for production
        run: npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.PRODUCTION_API_URL }}
          VITE_NODE_ENV: production
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Deploy to Cloud Storage
        run: |
          gsutil -m rsync -r -d dist/ gs://${{ secrets.GCS_BUCKET_NAME }}/
      
      - name: Set Cache Control
        run: |
          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" gs://${{ secrets.GCS_BUCKET_NAME }}/**/*.html
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${{ secrets.GCS_BUCKET_NAME }}/**/*.js
          gsutil -m setmeta -h "Cache-Control:public, max-age=31536000" gs://${{ secrets.GCS_BUCKET_NAME }}/**/*.css
      
      - name: Invalidate CDN Cache
        run: |
          gcloud compute url-maps invalidate-cdn-cache ${{ secrets.CDN_URL_MAP_NAME }} \
            --path "/*" --async