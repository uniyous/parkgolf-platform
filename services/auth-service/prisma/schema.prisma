generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  email         String           @unique
  password      String
  name          String?
  roleCode      String           @default("USER") // RoleMaster 참조 (필수)
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // 관계
  role          RoleMaster       @relation(fields: [roleCode], references: [code])
  permissions   UserPermission[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Admin {
  id            Int                 @id @default(autoincrement())
  email         String              @unique
  password      String
  name          String
  roleCode      String              @default("READONLY_STAFF") // RoleMaster 참조 (필수)
  phone         String?
  department    String?
  description   String?
  isActive      Boolean             @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  // 관계
  role          RoleMaster          @relation(fields: [roleCode], references: [code])
  permissions   AdminPermission[]
  activityLogs  AdminActivityLog[]
  refreshTokens AdminRefreshToken[]

  @@map("admins")
}

model AdminRefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  adminId   Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_refresh_tokens")
}



// 권한 마스터 테이블
model PermissionMaster {
  code        String   @id // 권한 코드 PK (예: 'BOOKING_CREATE')
  name        String   // 권한 이름 (예: '예약 생성')
  description String?  // 권한 설명
  category    String   // 권한 카테고리 (예: 'BOOKING', 'PROFILE', 'COURSE')
  level       String   @default("low") // 권한 레벨 (low, medium, high)
  isActive    Boolean  @default(true)  // 활성화 여부
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  rolePermissions RolePermission[]

  @@map("permission_masters")
}

// 역할 마스터 테이블  
model RoleMaster {
  code        String   @id // 역할 코드 PK (예: 'USER', 'ADMIN')
  name        String   // 역할 이름 (예: '일반 사용자', '관리자')
  description String?  // 역할 설명
  userType    String   // 사용자 유형 ('USER' 또는 'ADMIN')
  level       Int      @default(1) // 역할 레벨 (숫자가 높을수록 상위)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  users           User[]
  admins          Admin[]
  rolePermissions RolePermission[]

  @@map("role_masters")
}

// 역할-권한 매핑 테이블
model RolePermission {
  roleCode       String
  permissionCode String
  createdAt      DateTime         @default(now())
  
  role           RoleMaster       @relation(fields: [roleCode], references: [code], onDelete: Cascade)
  permission     PermissionMaster @relation(fields: [permissionCode], references: [code], onDelete: Cascade)

  @@id([roleCode, permissionCode])
  @@map("role_permissions")
}

// 기존 AdminPermission (일시적으로 기존 구조 유지)
model AdminPermission {
  id          Int      @id @default(autoincrement())
  adminId     Int
  permission  String   // 권한 코드를 직접 저장
  createdAt   DateTime @default(now())
  admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([adminId, permission])
  @@map("admin_permissions")
}

// 기존 UserPermission (일시적으로 기존 구조 유지)
model UserPermission {
  id          Int      @id @default(autoincrement())
  userId      Int
  permission  String   // 권한 코드를 직접 저장
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission])
  @@map("user_permissions")
}


model AdminActivityLog {
  id        Int      @id @default(autoincrement())
  adminId   Int
  action    String
  resource  String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_activity_logs")
}

// enum Role과 AdminRole은 RoleMaster로 대체됨
