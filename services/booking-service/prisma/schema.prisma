// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id                    Int           @id @default(autoincrement())
  
  // 타임슬롯 참조 (course-service의 time slot ID)
  timeSlotId            Int           // course-service의 CourseTimeSlot ID
  
  // 타임슬롯 정보 캐시 (성능 최적화용)
  slotType              SlotType      // NINE_HOLE 또는 EIGHTEEN_HOLE
  bookingDate           DateTime      // 예약 날짜
  startTime             String        // 시작 시간 (HH:MM)
  endTime               String        // 종료 시간 (HH:MM)
  
  // 9홀 예약용
  singleCourseId        Int?          // 단일 코스 ID
  singleCourseName      String?       // 단일 코스명 (캐시)
  
  // 18홀 예약용
  frontNineCourseId     Int?          // 전반 9홀 코스 ID
  frontNineCourseName   String?       // 전반 코스명 (캐시)
  backNineCourseId      Int?          // 후반 9홀 코스 ID
  backNineCourseName    String?       // 후반 코스명 (캐시)
  breakDurationMinutes  Int?          // 휴식 시간
  
  // 예약자 정보
  userId                Int?          // 등록된 사용자 (null이면 비회원)
  guestName             String?       // 비회원 예약자명
  guestEmail            String?       // 비회원 이메일
  guestPhone            String?       // 비회원 전화번호
  
  // 예약 상세 정보
  playerCount           Int           @default(1)
  pricePerPerson        Decimal       @db.Decimal(10, 2)
  serviceFee            Decimal       @db.Decimal(10, 2) @default(0)
  totalPrice            Decimal       @db.Decimal(10, 2)
  status                BookingStatus @default(PENDING)
  
  // 결제 정보
  paymentMethod         String?       // card, kakaopay, naverpay, tosspay, bank
  
  // 메타 정보
  specialRequests       String?       // 특별 요청사항
  bookingNumber         String        @unique // BK12345678 형식
  notes                 String?       // 관리자 메모
  
  // 캐시된 사용자 정보 (성능 최적화용)
  userEmail             String?       // 사용자 이메일
  userName              String?       // 사용자 이름
  userPhone             String?       // 사용자 전화번호
  
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  payments              Payment[]
  histories             BookingHistory[]

  @@index([userId])
  @@index([timeSlotId])
  @@index([singleCourseId])
  @@index([frontNineCourseId, backNineCourseId])
  @@index([bookingDate])
  @@index([bookingNumber])
  @@index([status])
  @@index([slotType])
  @@map("bookings")
}

enum SlotType {
  NINE_HOLE     // 9홀 단일 코스
  EIGHTEEN_HOLE // 18홀 듀얼 코스
  
  @@map("slot_type")
}

model Payment {
  id            Int           @id @default(autoincrement())
  bookingId     Int
  booking       Booking       @relation(fields: [bookingId], references: [id])
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod String
  paymentStatus PaymentStatus @default(PENDING)
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

model BookingHistory {
  id        Int      @id @default(autoincrement())
  bookingId Int
  booking   Booking  @relation(fields: [bookingId], references: [id])
  action    String   // CREATED, UPDATED, CANCELLED, etc.
  details   Json?
  userId    Int      // 작업 수행한 사용자
  createdAt DateTime @default(now())

  @@index([bookingId])
  @@map("booking_history")
}

// 타임슬롯 가용성 캐시 (course-service와 동기화)
model TimeSlotAvailability {
  id                   Int      @id @default(autoincrement())
  
  // course-service의 time slot 참조
  timeSlotId           Int      @unique // course-service의 CourseTimeSlot ID
  
  // 캐시된 타임슬롯 정보
  slotType             SlotType
  date                 DateTime
  startTime            String   // HH:MM format
  endTime              String   // HH:MM format
  
  // 9홀 정보
  singleCourseId       Int?
  singleCourseName     String?
  
  // 18홀 정보  
  frontNineCourseId    Int?
  frontNineCourseName  String?
  backNineCourseId     Int?
  backNineCourseName   String?
  
  // 가용성 정보
  maxCapacity          Int      @default(4)
  currentBookings      Int      @default(0)
  availableSlots       Int      @default(4) // maxCapacity - currentBookings
  isAvailable          Boolean  @default(true)
  
  // 가격 정보
  price                Decimal  @db.Decimal(10, 2)
  isPremium            Boolean  @default(false)
  
  // 메타데이터
  lastSyncAt           DateTime @default(now()) // course-service와 마지막 동기화 시간
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([slotType])
  @@index([singleCourseId, date])
  @@index([frontNineCourseId, backNineCourseId, date])
  @@index([date, startTime])
  @@index([isAvailable])
  @@map("time_slot_availability")
}

// 추가: 코스 정보 캐시 (course-service에서 동기화)
model CourseCache {
  id           Int      @id @default(autoincrement())
  courseId     Int      @unique
  name         String
  location     String
  description  String?
  rating       Decimal  @db.Decimal(3, 2)
  pricePerHour Decimal  @db.Decimal(10, 2)
  imageUrl     String?
  amenities    String[] // PostgreSQL array
  openTime     String   // HH:MM format
  closeTime    String   // HH:MM format
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("course_cache")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}