generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  address     String?
  phoneNumber String?
  email       String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]

  @@map("companies")
}

model Course {
  id                Int                    @id @default(autoincrement())
  name              String
  description       String?
  address           String
  phoneNumber       String?
  status            CourseStatus           @default(ACTIVE)
  companyId         Int
  isActive          Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  course_time_slots CourseTimeSlot[]
  weeklySchedules   CourseWeeklySchedule[]
  company           Company                @relation(fields: [companyId], references: [id])
  holes             Hole[]

  @@map("courses")
}

model Hole {
  id         Int      @id @default(autoincrement())
  holeNumber Int
  par        Int
  distance   Int?
  courseId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  course     Course   @relation(fields: [courseId], references: [id])
  teeBoxes   TeeBox[]

  @@unique([courseId, holeNumber])
  @@map("holes")
}

model TeeBox {
  id        Int      @id @default(autoincrement())
  name      String
  color     String?
  distance  Int
  holeId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hole      Hole     @relation(fields: [holeId], references: [id])

  @@map("tee_boxes")
}

model CourseTimeSlot {
  id         Int      @id @default(autoincrement())
  date       String
  startTime  String
  endTime    String
  maxPlayers Int      @default(4)
  price      Decimal  @db.Decimal(10, 2)
  courseId   Int
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  courses    Course   @relation(fields: [courseId], references: [id])

  @@unique([courseId, date, startTime, endTime])
  @@map("course_time_slots")
}

model CourseWeeklySchedule {
  id        Int      @id @default(autoincrement())
  dayOfWeek Int
  openTime  String
  closeTime String
  courseId  Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([courseId, dayOfWeek])
  @@map("course_weekly_schedules")
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}
